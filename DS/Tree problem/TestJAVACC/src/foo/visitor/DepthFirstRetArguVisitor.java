/* Generated by JTB 1.4.11 */
package foo.visitor;

import foo.syntaxtree.*;
import java.util.*;

public class DepthFirstRetArguVisitor<R, A> implements IRetArguVisitor<R, A> {


  @Override
  public R visit(final NodeChoice n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    final R nRes = n.choice.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final NodeList n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this, argu);
    }
    return nRes;
  }

  @Override
  public R visit(final NodeListOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this, argu);
        }
      return nRes;
    } else
      return null;
  }

  @Override
  public R visit(final NodeOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      final R nRes = n.node.accept(this, argu);
      return nRes;
    } else
      return null;
  }

  @Override
  public R visit(final NodeSequence n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this, argu);
    }
    return nRes;
  }

  @Override
  public R visit(final NodeTCF n, @SuppressWarnings("unused") final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  @Override
  public R visit(final NodeToken n, @SuppressWarnings("unused") final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  @Override
  public R visit(final Start n, final A argu) {
    R nRes = null;
    // f0 -> Expression()
    n.f0.accept(this, argu);
    // f1 -> ";"
    n.f1.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final Expression n, final A argu) {
    R nRes = null;
    // f0 -> AdditiveExpression()
    n.f0.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final AdditiveExpression n, final A argu) {
    R nRes = null;
    // f0 -> MultiplicativeExpression()
    n.f0.accept(this, argu);
    // f1 -> ( #0 ( %0 "+"
    // .. .. . .. | %1 "-" )
    // .. .. . #1 MultiplicativeExpression() )*
    n.f1.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final MultiplicativeExpression n, final A argu) {
    R nRes = null;
    // f0 -> UnaryExpression()
    n.f0.accept(this, argu);
    // f1 -> ( #0 ( %0 "*"
    // .. .. . .. | %1 "/"
    // .. .. . .. | %2 "%" )
    // .. .. . #1 UnaryExpression() )*
    n.f1.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final UnaryExpression n, final A argu) {
    R nRes = null;
    // f0 -> . %0 #0 "(" #1 Expression() #2 ")"
    // .. .. | %1 Identifier()
    // .. .. | %2 MyInteger()
    n.f0.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final Identifier n, final A argu) {
    R nRes = null;
    // f0 -> < IDENTIFIER >
    n.f0.accept(this, argu);
    return nRes;
  }

  @Override
  public R visit(final MyInteger n, final A argu) {
    R nRes = null;
    // f0 -> < INTEGER_LITERAL >
    n.f0.accept(this, argu);
    return nRes;
  }

}
