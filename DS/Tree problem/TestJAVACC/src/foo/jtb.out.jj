/* Generated by JTB 1.4.11 */
options
{
static = true;
    // JTB_P = "foo";
}

PARSER_BEGIN(MyNewGrammar)
package foo;

import foo.visitor.*;
import foo.syntaxtree.*;


public class MyNewGrammar {

  /* --- User code --- */

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    new MyNewGrammar(System.in);
    try {
      Start start = MyNewGrammar.Start();
      DepthFirstVoidVisitor v = new MyVisitor();
      start.accept(v);
    }
    catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  /* --- User code --- */

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < INTEGER_LITERAL : <DECIMAL_LITERAL> ( ["l", "L"] )?| <HEX_LITERAL> ( ["l", "L"] )?| <OCTAL_LITERAL> ( ["l", "L"] )? >
| < #DECIMAL_LITERAL : ["1"-"9"] ( ["0"-"9"] )* >
| < #HEX_LITERAL : "0" ["x", "X"] ( ["0"-"9", "a"-"f", "A"-"F"] )+ >
| < #OCTAL_LITERAL : "0" ( ["0"-"7"] )* >
}

TOKEN :
{
  < IDENTIFIER : <LETTER> ( <LETTER>| <DIGIT> )* >
| < #LETTER : ["_", "a"-"z", "A"-"Z"] >
| < #DIGIT : ["0"-"9"] >
}

Start Start() :
{
  // --- JTB generated node declarations ---
  Expression n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
}
{
  n0 = Expression()
  ";"
  { n1 = JTBToolkit.makeNodeToken(n2); }
  { return new Start(n0, n1); }
}

Expression Expression() :
{
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
}
{
  n0 = AdditiveExpression()
  { return new Expression(n0); }
}

AdditiveExpression AdditiveExpression() :
{
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  MultiplicativeExpression n8 = null;
}
{
  n0 = MultiplicativeExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        "+"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 2); }
      |
        "-"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 2); }
      )
          )
    { n2.addNode(n3); }
    n8 = MultiplicativeExpression()
    { n2.addNode(n8); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new AdditiveExpression(n0, n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
  // --- JTB generated node declarations ---
  UnaryExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  UnaryExpression n10 = null;
}
{
  n0 = UnaryExpression()
  (
    { n2 = new NodeSequence(2); }
    (
      (
        "*"
        { n4 = JTBToolkit.makeNodeToken(n5); }
        { n3 = new NodeChoice(n4, 0, 3); }
      |
        "/"
        { n6 = JTBToolkit.makeNodeToken(n7); }
        { n3 = new NodeChoice(n6, 1, 3); }
      |
        "%"
        { n8 = JTBToolkit.makeNodeToken(n9); }
        { n3 = new NodeChoice(n8, 2, 3); }
      )
          )
    { n2.addNode(n3); }
    n10 = UnaryExpression()
    { n2.addNode(n10); }
    { n1.addNode(n2); }
  )*
  { n1.nodes.trimToSize(); }
  { return new MultiplicativeExpression(n0, n1); }
}

UnaryExpression UnaryExpression() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  Identifier n7 = null;
  MyInteger n8 = null;
}
{
  (
    { n1 = new NodeSequence(3); }
    "("
    { n2 = JTBToolkit.makeNodeToken(n3); }
    { n1.addNode(n2); }
    n4 = Expression()
    { n1.addNode(n4); }
    ")"
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n1.addNode(n5); }
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n7 = Identifier()
    { n0 = new NodeChoice(n7, 1, 3); }
  |
    n8 = MyInteger()
    { n0 = new NodeChoice(n8, 2, 3); }
  )
  { return new UnaryExpression(n0); }
}

Identifier Identifier() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new Identifier(n0); }
}

MyInteger MyInteger() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
}
{
  < INTEGER_LITERAL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  { return new MyInteger(n0); }
}
